
tp3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000aa4  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000073b  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e4       	ldi	r30, 0x4E	; 78
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  a6:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Init>:
#include <avr/io.h>

void USART_Init( unsigned int baud )
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	00 d0       	rcall	.+0      	; 0xb4 <USART_Init+0x6>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	9a 83       	std	Y+2, r25	; 0x02
  ba:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR0H = (unsigned char)(baud>>8);
  bc:	e5 ec       	ldi	r30, 0xC5	; 197
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	89 2f       	mov	r24, r25
  c6:	99 27       	eor	r25, r25
  c8:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)baud;
  ca:	e4 ec       	ldi	r30, 0xC4	; 196
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  d2:	e1 ec       	ldi	r30, 0xC1	; 193
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  da:	e2 ec       	ldi	r30, 0xC2	; 194
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	80 83       	st	Z, r24
}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 2f       	mov	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	80 72       	andi	r24, 0x20	; 32
 104:	90 70       	andi	r25, 0x00	; 0
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	b9 f3       	breq	.-18     	; 0xf8 <USART_Transmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 10a:	e6 ec       	ldi	r30, 0xC6	; 198
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	80 83       	st	Z, r24
}
 112:	0f 90       	pop	r0
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <USART_Receive>:


unsigned char USART_Receive( void )
{
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
/* Wait for data to be received */
while ( !(UCSR0A & (1<<RXC0)) )
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	dc f7       	brge	.-10     	; 0x122 <USART_Receive+0x8>
;
/* Get and return received data from buffer */
return UDR0;
 12c:	e6 ec       	ldi	r30, 0xC6	; 198
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
}
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <main>:



int main() {
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
//	USART_Init(2400);
//	while(1) {
//		USART_Transmit(USART_Receive());
//	}
}
 144:	cf 91       	pop	r28
 146:	df 91       	pop	r29
 148:	08 95       	ret

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
