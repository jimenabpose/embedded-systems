
tp2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a68  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006f6  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_13>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e3       	ldi	r30, 0x3C	; 60
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  a6:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_13>:
#define OUTPUT 0Xff

#define LEDS_ON 0x00
#define LEDS_OFF 0xff

ISR(TIMER1_COMPA_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	cli();
  c6:	f8 94       	cli
	if(LEDS_PORT == LEDS_ON) {
  c8:	e5 e2       	ldi	r30, 0x25	; 37
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 23       	and	r24, r24
  d0:	29 f4       	brne	.+10     	; 0xdc <__vector_13+0x2e>
		LEDS_PORT = LEDS_OFF;
  d2:	e5 e2       	ldi	r30, 0x25	; 37
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
  da:	03 c0       	rjmp	.+6      	; 0xe2 <__vector_13+0x34>
	} else {
		LEDS_PORT = LEDS_ON;
  dc:	e5 e2       	ldi	r30, 0x25	; 37
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
	}

	sei();
  e2:	78 94       	sei
}
  e4:	cf 91       	pop	r28
  e6:	df 91       	pop	r29
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:



int main() {
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	LEDS_ADDR = OUTPUT;
 100:	e4 e2       	ldi	r30, 0x24	; 36
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	80 83       	st	Z, r24
	LEDS_PORT = LEDS_OFF;
 108:	e5 e2       	ldi	r30, 0x25	; 37
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	80 83       	st	Z, r24
	 * TCNT es el valor del timer (lo que se va incrementando)
	 * OCR es contra lo que se compara
	 */

	// Habilito las interrupciones
	sei();
 110:	78 94       	sei

	// Seteo el prescaler de 64
	TCCR1B = (1<<CS10) | (1<<CS11);
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	80 83       	st	Z, r24

	// Seteo el output compare
	OCR1A = 15625;
 11a:	e8 e8       	ldi	r30, 0x88	; 136
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	9d e3       	ldi	r25, 0x3D	; 61
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24

	// Habilito el RTC1 y habilito que se compare con el OCR1AH
	TIMSK1 = (1<<ICIE1) | (1 << OCIE1A);
 126:	ef e6       	ldi	r30, 0x6F	; 111
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	82 e2       	ldi	r24, 0x22	; 34
 12c:	80 83       	st	Z, r24
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
	/*
	 * clock: 1000000 Hz
	 * prescaler: 64
	 * 1000000/64 = 15625; -> tengo que contar hasta 15625
	 */
}
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
